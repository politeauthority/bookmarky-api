version: "3"
vars:
  K8S_NS: "bookmarky"
  K8S_NS_DEV: "bookmarky-dev"
  K8S_NS_STAGE: "bookmarky-stage"
  K8S_NS_PROD: "bookmarky"

tasks:
  dev-exec-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -n ${NS} -l app=bookmarky-api --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo $POD
        echo "Execing to pod $POD"
        kubectl exec -n ${NS} -it ${POD} -- sh

  dev-cp-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -l app=bookmarky-api -n ${NS} --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Copying to pod $NS/$POD"
        kubectl cp -n ${NS} ./src ${POD}:/work
        kubectl cp -n ${NS} ./pyproject.toml ${POD}:/work/src/
        kubectl cp -n ${NS} ./tests ${POD}:/work
        echo "Coppied source and tests"
        echo "Building"
        kubectl exec -it -n ${NS} ${POD} -- sh -c "cd /work/src && pip install ."

  dev-deploy:
    cmds:
      - |
        kustomize build kubernetes-manifests/envs/dev | kubectl apply -f -

  update-version:
    cmds:
      - |
        new_version="{{.CLI_ARGS}}"
        file_path="src/bookmarky/api/version.py"
        current_version=$(awk -F'"' '/version = / {print $2}' $file_path)

        echo $current_version
        # Replace the current version number with the new version number using a different delimiter
        sed -i "" 's/version = "'"$current_version"'"/version = "'"$new_version"'"/g' $file_path

        # Update README
        file_path="README.md"
        sed -i "" "s/# Bookmarky v$current_version/# Bookmarky v$new_version/g" $file_path

        #Update pyproject
        file_path="pyproject.toml"
        sed -i "" "s/version = \"$current_version\"/version = \"$new_version\"/g" $file_path

        # Update the newTag in the kustomization.yaml file
        file_path="kubernetes-manifests/envs/prod/kustomization.yaml"
        yq e ".images[0].newTag = \"prod-$new_version\"" -i $file_path

        # Update the newTag in the kustomization.yaml file
        file_path="kubernetes-manifests/envs/stage/kustomization.yaml"
        yq e ".images[0].newTag = \"stage-$new_version\"" -i $file_path

        # # Update the newTag in the kustomization.yaml file
        # file_path="kubernetes-manifests/envs/dev/kustomization.yaml"
        # yq e ".images[0].newTag = \"stage-$new_version\"" -i $file_path

        git add src/bookmarky/api/version.py
        git add README.md
        git add pyproject.toml
        git add kubernetes-manifests/envs/dev/kustomization.yaml
        git add kubernetes-manifests/envs/stage/kustomization.yaml
        git add kubernetes-manifests/envs/prod/kustomization.yaml
        echo "Version number updated from $current_version to $new_version"
    silent: True

  stage-deploy:
    cmds:
      - |
        kustomize build kubernetes-manifests/envs/stage | kubectl apply -f -

  stage-logs-api:
    cmds:
      - |
        stern -n bookmarky-stage deployment/bookmarky-api

  stage-exec-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_STAGE}}"
        POD=$(kubectl get pods -n ${NS} -l app=bookmarky-api --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Execing to pod $POD"
        kubectl exec -n ${NS} -it ${POD} -- sh

  prod-deploy:
    cmds:
      - |
        kustomize build kubernetes-manifests/envs/prod | kubectl apply -f -

  prod-exec-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_PROD}}"
        POD=$(kubectl get pods -n ${NS} -l app=bookmarky-api --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Execing to pod $POD"
        kubectl exec -n ${NS} -it ${POD} -- sh

  prod-logs-api:
    cmds:
      - |
        stern -n bookmarky deployment/bookmarky-api

  build-docker:
    cmds:
      - |
        BUILD_TARGET="{{.CLI_ARGS}}"
        if [ -z "$BUILD_TARGET" ]; then
          BUILD_TARGET="base"
        fi
        if [ -d docker/build-files ]; then
          rm -rf docker/build-files
        fi
        echo "Building Target: ${BUILD_TARGET}"
        mkdir docker/build-files
        cp pyproject.toml docker/build-files
        cp tox.ini docker/build-files
        cp -r src docker/build-files
        cp -r tests docker/build-files
        docker build -t harbor.squid-ink.us/politeauthority/bookmarky --target ${BUILD_TARGET} --no-cache docker/
        rm -rf docker/build-files
    silent: True

  ci-new-stage:
    cmds:
      - |
        git config --global --add safe.directory /__w/bookmarky/bookmarky
        git stash
        git fetch origin main
        git checkout main
        git checkout -b stage
        git push origin stage
    silent: True

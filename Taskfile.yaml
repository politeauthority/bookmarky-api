version: "3"
vars:
  K8S_NS: "bookmarky"
  K8S_NS_DEV: "bookmarky-dev"
  K8S_NS_STAGE: "bookmarky-stage"
  K8S_NS_PROD: "bookmarky"

tasks:
  dev-exec-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -n ${NS} -l app=bookmarky-api --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Execing to pod $POD"
        kubectl exec -n ${NS} -it ${POD} -- sh

  dev-cp-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -l app=bookmarky-api -n ${NS} --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Copying to pod $NS/$POD"
        kubectl cp -n ${NS} -c bookmarky-api ./src ${POD}:/work
        kubectl cp -n ${NS} -c bookmarky-api ./pyproject.toml ${POD}:/work/src/
        kubectl cp -n ${NS} -c bookmarky-api ./tests ${POD}:/work
        echo "Coppied source and tests"
        echo "Building"
        kubectl exec -it -n ${NS} ${POD} -- sh -c "cd /work/src && pip install ."

  dev-cp-api-plib:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -l app=bookmarky-api -n ${NS} --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Copying to pod $NS/$POD"
        kubectl cp -n ${NS} -c bookmarky-api ../polite-lib/src ${POD}:/work/polite-lib
        echo "Coppied Polite-Lib source"
        echo "Building"
        # kubectl exec -it -n ${NS} ${POD} -- sh -c "cd /work/src && pip install ."

  dev-cp-api-src-fast:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -l app=bookmarky-api -n ${NS} --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Copying to pod $NS/$POD"
        kubectl cp -n ${NS} -c bookmarky-api ./src ${POD}:/work
        kubectl cp -n ${NS} -c bookmarky-api ./pyproject.toml ${POD}:/work/src/
        echo "Coppied source"
        echo "Building"
        kubectl exec -it -n ${NS} ${POD} -- sh -c "cd /work/src && pip install . --ignore-requires-python" && ls /bin/

  dev-cp-api-tests-fast:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        POD=$(kubectl get pods -l app=bookmarky-api -n ${NS} --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Copying to pod $NS/$POD"
        kubectl cp -n ${NS} -c bookmarky-api ./tests ${POD}:/work
        echo "Coppied tests"
        echo "Building"
        kubectl exec -it -n ${NS} ${POD} -- sh -c "cd /work/tests && pip install . --ignore-requires-python"

  dev-deploy:
    cmds:
      - |
        kustomize build kubernetes-manifests/envs/dev | kubectl apply -f -

  dev-destroy:
    cmds:
      - |
        NS=$"{{.K8S_NS_DEV}}"
        kubectl delete deployment bookmarky-api -n ${NS}
        kubectl delete deployment bookmarky-stage -n ${NS}

        NS=$"{{.K8S_NS_STAGE}}"
        kubectl delete deployment bookmarky-api -n ${NS}
        kubectl delete deployment bookmarky-stage -n ${NS}

        gha-runners bookmarky-api 0
        gha-runners bookmarky-web 0

  # done-working:
  #     cmds:
  #     - |
  #       NS=$"{{.K8S_NS_DEV}}"
  #       kustomize delete deployment bookmarky-api -n ${NS}
  #       kustomize delete deployment bookmarky-stage -n ${NS}

  semver-add:
    cmds:
      - |
        # Read the current version from the file into a bash variable
        current_version=$(awk -F\" '/version/ {print $2}' your_version_file.py)

        # Extract the last segment of the version number
        last_segment=$(awk -F. '{print $NF}' <<< "$current_version")

        # Increment the last segment by 1
        new_last_segment=$((last_segment + 1))

        # Replace the last segment in the version number
        new_version=$(awk -F. -v OFS=. '{$NF = $NF + 1} 1' <<< "$current_version")

        # Print the new version
        echo "New version: $new_version"

  update-semver:
    cmds:
      - |
        # Read the version number from the file
        CURRENT_VERSION=$(<"VERSION")
        IFS='.' read -r major minor patch revision <<< "$CURRENT_VERSION"
        ((revision++))
        NEW_VERSION="$major.$minor.$patch.$revision"
        echo "$CURRENT_VERSION > $NEW_VERSION"
        sed -i.bak "s/$CURRENT_VERSION/$NEW_VERSION/g" "VERSION"
        echo "Updated VERSION"
        sed -i.bak "s/$CURRENT_VERSION/$NEW_VERSION/g" "README.md"
        echo "Updated README.md"
        sed -i.bak "s/$CURRENT_VERSION/$NEW_VERSION/g" "src/bookmarky/api/version.py"
        echo "Updated src/bookmarky/api/version.py"
        sed -i.bak "s/$CURRENT_VERSION/$NEW_VERSION/g" "pyproject.toml"
        echo "Updated pyproject.toml"
        sed -i.bak "s/$CURRENT_VERSION/$NEW_VERSION/g" "kubernetes-manifests/envs/stage/kustomization.yaml"
        echo "Updated kustomize stage"
        sed -i.bak "s/$CURRENT_VERSION/$NEW_VERSION/g" "kubernetes-manifests/envs/prod/kustomization.yaml"
        echo "Update kustomize prod"
        git add README.md
        git add VERSION
        git add src/bookmarky/api/version.py
        git add pyproject.toml
        git add kubernetes-manifests/envs/stage/kustomization.yaml
        git add kubernetes-manifests/envs/prod/kustomization.yaml

  stage-deploy:
    cmds:
      - |
        kustomize build kubernetes-manifests/envs/stage | kubectl apply -f -

  stage-logs-api:
    cmds:
      - |
        stern -n bookmarky-stage deployment/bookmarky-api

  stage-exec-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_STAGE}}"
        POD=$(kubectl get pods -n ${NS} -l app=bookmarky-api --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Execing to pod $POD"
        kubectl exec -n ${NS} -it ${POD} -- sh

  stage-destroy:
    cmds:
      - |
        NS=$"{{.K8S_NS_STAGE}}"
        kustomize delete deployment bookmarky-api -n ${NS}
        kustomize delete deployment bookmarky-stage -n ${NS}

  prod-exec-api:
    cmds:
      - |
        NS=$"{{.K8S_NS_PROD}}"
        POD=$(kubectl get pods -n ${NS} -l app=bookmarky-api --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Execing to pod $POD"
        kubectl exec -n ${NS} -it ${POD} -- sh

  prod-logs-api:
    cmds:
      - |
        stern -n bookmarky deployment/bookmarky-api

  prod-deploy:
    cmds:
      - |
        kustomize build kubernetes-manifests/envs/prod | kubectl apply -f -

  build-docker:
    cmds:
      - |
        BUILD_TARGET="{{.CLI_ARGS}}"
        if [ -z "$BUILD_TARGET" ]; then
          BUILD_TARGET="base"
        fi
        if [ -d docker/build-files ]; then
          rm -rf docker/build-files
        fi
        echo "Building Target: ${BUILD_TARGET}"
        mkdir docker/build-files
        cp pyproject.toml docker/build-files
        cp tox.ini docker/build-files
        cp -r src docker/build-files
        cp -r tests docker/build-files
        docker build -t harbor.squid-ink.us/politeauthority/bookmarky \
          --target ${BUILD_TARGET} \
          --build-arg="harbor.squid-ink.us/docker-hub" \
          --no-cache docker/
        rm -rf docker/build-files
    silent: True

  manci-new-stage:
    cmds:
      - |
        # git config --global --add safe.directory /__w/bookmarky/bookmarky
        git stash
        git fetch origin main
        git checkout main
        git pull origin main
        git branch -D stage
        git checkout -b stage
        git push origin stage
        git stash pop
        # @todo: 
        #  - crank out new sem-ver and commit that
        #  - commit that
        #  - push that
        #  - Create PR with that sem ver
    silent: False

  manci--stage-pr:
    cmds:
      - |
        git checkout stage
        git push origin stage
        gh pr create --title 0.0.1.10

  pre-commit:
    cmds:
      - |
        kustomize build kubernetes-manifests/base >> /dev/null
        kustomize build kubernetes-manifests/envs/prod >> /dev/null
        kustomize build kubernetes-manifests/envs/stage >> /dev/null
        kustomize build kubernetes-manifests/envs/dev >> /dev/null
